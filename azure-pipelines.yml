trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

variables:
  current_mysql_mode: STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
  legacy_mysql_mode: STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  dotnet_version: 3.1.x
  dotnet_ef_tools_version: 3.1.0

jobs:

- job: Linux
  strategy:
    matrix:
      MySQL 8.0.18:
        DOCKER_IMAGE: mysql:8.0.18
        SERVER_VERSION: 8.0.18-mysql
        SQL_MODE: $(current_mysql_mode)
        INTEGRATION_TESTS: "true"
      MySQL 5.7.27:
        DOCKER_IMAGE: mysql:5.7.27
        SERVER_VERSION: 5.7.27-mysql
        SQL_MODE: $(legacy_mysql_mode)
        INTEGRATION_TESTS: "true"
      MariaDB 10.4.10:
        DOCKER_IMAGE: mariadb:10.4.10
        SERVER_VERSION: 10.4.10-mariadb
        SQL_MODE: $(legacy_mysql_mode)
        INTEGRATION_TESTS: "false"
      MariaDB 10.3.18:
        DOCKER_IMAGE: mariadb:10.3.20
        SERVER_VERSION: 10.3.20-mariadb
        SQL_MODE: $(legacy_mysql_mode)
        INTEGRATION_TESTS: "false"
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core SDK'
    inputs:
      version: $(dotnet_version)
  - bash: |
      set -e
      sudo systemctl stop mysql
      docker run --name mysql -e MYSQL_ROOT_PASSWORD=Password12! -p 3306:3306 -d $DOCKER_IMAGE
    displayName: Install Database Server
  - bash: |
      ./dotnet-env.sh dotnet --info
    displayName: .NET Core Information
  - bash: |
      set -e
      cp test/EFCore.MySql.FunctionalTests/config.json.example test/EFCore.MySql.FunctionalTests/config.json
      cp test/EFCore.MySql.IntegrationTests/appsettings.ci.json test/EFCore.MySql.IntegrationTests/appsettings.json
      cp test/EFCore.MySql.IntegrationTests/config.json.example test/EFCore.MySql.IntegrationTests/config.json
      ./build.sh
    displayName: Setup and Build Solution
  - bash: |
      started="false"
      for i in $(seq 0 300); do
        if docker exec mysql mysqladmin -h localhost -P 3306 -u root -pPassword12! status; then
          started="true"
          break
        fi
        sleep 1
      done

      if [ "$started" = "false" ]; then
        echo "$DOCKER_IMAGE container failed to start in 5 minutes" >&2
        exit 1
      fi

      docker exec mysql mysql -h localhost -P 3306 -u root -pPassword12! -e "SET GLOBAL sql_mode = '$SQL_MODE';"
    displayName: Setup Database
  - bash: |
      ./dotnet-env.sh dotnet tool install --global dotnet-ef --version $(dotnet_ef_tools_version)
      ./dotnet-env.sh dotnet ef --version
    displayName: Install EF Core Tools
  - bash: |
      if [ "$(INTEGRATION_TESTS)" = "true" ]; then
        ./dotnet-env.sh ./test/EFCore.MySql.IntegrationTests/scripts/rebuild.sh
      fi
    displayName: Build Integration Tests
  - bash: ./dotnet-env.sh dotnet test --logger trx test/EFCore.MySql.Tests
    displayName: Tests
    continueOnError: true
  - bash: ./dotnet-env.sh dotnet test test/EFCore.MySql.FunctionalTests -c Release --logger trx --verbosity detailed
    displayName: Functional Tests
    continueOnError: true
  - bash: ./dotnet-env.sh dotnet run --project test/EFCore.MySql.IntegrationTests -c Release testMigrate
    displayName: Integration Tests applying migrations
    continueOnError: true
    condition: eq(variables['INTEGRATION_TESTS'],'true')
  - bash: ./dotnet-env.sh ./test/EFCore.MySql.IntegrationTests/scripts/scaffold.sh
    displayName: Integration Tests scaffolding
    continueOnError: true
    condition: eq(variables['INTEGRATION_TESTS'],'true')
  - bash: rm -rf ./test/EFCore.MySql.IntegrationTests/Scaffold
    displayName: Remove scaffolding files
    continueOnError: true
    condition: eq(variables['INTEGRATION_TESTS'],'true')
  - bash: ./dotnet-env.sh dotnet test -c Release --logger trx test/EFCore.MySql.IntegrationTests
    displayName: Integration Tests with EF_BATCH_SIZE=1
    continueOnError: true
    condition: eq(variables['INTEGRATION_TESTS'],'true')
  - bash: export EF_BATCH_SIZE="10" && ./dotnet-env.sh dotnet test -c Release --logger trx test/EFCore.MySql.IntegrationTests
    displayName: Integration Tests with EF_BATCH_SIZE=10
    continueOnError: true
    condition: eq(variables['INTEGRATION_TESTS'],'true')
  - bash: export EF_RETRY_ON_FAILURE="3" && ./dotnet-env.sh dotnet test -c Release --logger trx test/EFCore.MySql.IntegrationTests
    displayName: Integration Tests with EF_RETRY_ON_FAILURE=3
    continueOnError: true
    condition: eq(variables['INTEGRATION_TESTS'],'true')
  - bash: ./dotnet-env.sh ./test/EFCore.MySql.IntegrationTests/scripts/legacy.sh
    displayName: Integration Tests legacy migrations
    continueOnError: true
    condition: eq(variables['INTEGRATION_TESTS'],'true')
  - bash: export EF_DATABASE="pomelo_test2" && ./dotnet-env.sh dotnet build ./test/EFCore.MySql.IntegrationTests -c Release
    displayName: Integration Tests Building migrations with EF_DATABASE=pomelo_test2
    continueOnError: true
    condition: eq(variables['INTEGRATION_TESTS'],'true')
  - bash: export EF_DATABASE="pomelo_test2" && ./dotnet-env.sh ./test/EFCore.MySql.IntegrationTests/scripts/rebuild.sh
    displayName: Integration Tests Setup migrations with EF_DATABASE=pomelo_test2
    continueOnError: true
    condition: eq(variables['INTEGRATION_TESTS'],'true')
  - bash: export EF_DATABASE="pomelo_test2" && ./dotnet-env.sh dotnet test -c Release --logger trx test/EFCore.MySql.IntegrationTests
    displayName: Integration Tests with EF_DATABASE=pomelo_test2
    continueOnError: true
    condition: eq(variables['INTEGRATION_TESTS'],'true')
  - task: PublishTestResults@2
    displayName: Publish Test Results
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: test/**/*.trx
      testRunTitle: Linux $(DOCKER_IMAGE)
      mergeTestResults: true
      failTaskOnFailedTests: true

- job: Windows
  pool:
    vmImage: 'windows-2019'
  variables:
    sql_mode: $(current_mysql_mode)
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core SDK'
    inputs:
      version: $(dotnet_version)
  - pwsh: |
      docker run `
        -d `
        --name "mysql" `
        -e "MYSQL_ROOT_PASSWORD=Password12!" `
        -p "3306:3306" `
        pomelofoundation/mysql-windows:8-ltsc2019
    displayName: Install Database Server
  - pwsh: |
      .\dotnet-env.ps1 dotnet --info
    displayName: .NET Core Information
  - pwsh: |
      cp test\EFCore.MySql.FunctionalTests\config.json.example test\EFCore.MySql.FunctionalTests\config.json
      cp test\EFCore.MySql.IntegrationTests\appsettings.ci.json test\EFCore.MySql.IntegrationTests\appsettings.json
      cp test\EFCore.MySql.IntegrationTests\config.json.example test\EFCore.MySql.IntegrationTests\config.json
      .\build.cmd
    displayName: Setup and Build Solution
  - pwsh: |
      $started=$false
      For ($i=0; $i -le 300; $i++) {
        docker exec mysql mysqladmin -h localhost -P 3306 -u root "-pPassword12!" status
        if ($LastExitCode -eq 0) {
          $started=$true
          break;
        }
        Start-Sleep 1
      }
      if (!$started) {
        Write-Error "mysql container failed to start in 5 minutes"
        exit 1
      }
      docker exec mysql mysql -h localhost -u root -pPassword12! -e "SET GLOBAL sql_mode = '$(sql_mode)';"
    errorActionPreference: continue
    displayName: Setup Database
  - pwsh: |
      .\dotnet-env.ps1 dotnet tool install --global dotnet-ef --version $(dotnet_ef_tools_version)
      .\dotnet-env.ps1 dotnet ef --version
    displayName: Install EF Core Tools
  - pwsh: |
      .\dotnet-env.ps1 .\test\EFCore.MySql.IntegrationTests\scripts\rebuild.ps1
    displayName: Build Integration Tests
  - pwsh: .\dotnet-env.ps1 dotnet test --logger trx test\EFCore.MySql.Tests
    displayName: Tests
    continueOnError: true
  - pwsh: .\dotnet-env.ps1 dotnet test test\EFCore.MySql.FunctionalTests -c Release --logger trx --verbosity detailed
    displayName: Functional Tests
    continueOnError: true
  - pwsh: .\dotnet-env.ps1 dotnet run --project test\EFCore.MySql.IntegrationTests -c Release testMigrate
    displayName: Integration Tests applying migration
    continueOnError: true
  - pwsh: .\dotnet-env.ps1 dotnet test -c Release --logger trx test\EFCore.MySql.IntegrationTests
    displayName: Integration Tests with EF_BATCH_SIZE=1
    continueOnError: true
  - pwsh: $env:EF_BATCH_SIZE="10"; .\dotnet-env.ps1 dotnet test -c Release --logger trx test\EFCore.MySql.IntegrationTests
    displayName: Integration Tests with EF_BATCH_SIZE=10
    continueOnError: true
  - pwsh: $env:EF_RETRY_ON_FAILURE="3"; .\dotnet-env.ps1 dotnet test -c Release --logger trx test\EFCore.MySql.IntegrationTests
    displayName: Integration Tests with EF_RETRY_ON_FAILURE=3
    continueOnError: true
  - pwsh: $env:EF_DATABASE="pomelo_test2"; .\dotnet-env.ps1 dotnet build .\test\EFCore.MySql.IntegrationTests -c Release
    displayName: Integration Tests Building migrations with EF_DATABASE=pomelo_test2
    continueOnError: true
  - pwsh: $env:EF_DATABASE="pomelo_test2"; .\dotnet-env.ps1 .\test\EFCore.MySql.IntegrationTests\scripts\rebuild.ps1
    displayName: Integration Tests Setup migrations with EF_DATABASE=pomelo_test2
    continueOnError: true
  - pwsh: $env:EF_DATABASE="pomelo_test2"; .\dotnet-env.ps1 dotnet test -c Release --logger trx test\EFCore.MySql.IntegrationTests
    displayName: Integration Tests with EF_DATABASE=pomelo_test2
    continueOnError: true
  - task: PublishTestResults@2
    displayName: Publish Test Results
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: test/**/*.trx
      testRunTitle: Windows
      mergeTestResults: true
      failTaskOnFailedTests: true

- job: Nuget
  dependsOn:
    - Linux
    - Windows
  condition: and( succeededOrFailed(), ne(variables['Build.Reason'], 'PullRequest') )
  variables:
    BuildSucceeded: $[ and( in(dependencies.Linux.result, 'Succeeded', 'SucceededWithIssues'), in(dependencies.Windows.result, 'Succeeded', 'SucceededWithIssues')) ]
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: |
      set -e

      pack="false"
      pack_nuget_org="false"
      pack_wip="false"

      final_version_kind=""
      if echo "$(Build.SourceBranch)" | grep -qE '^refs/tags/'; then
        pack="true"
        if echo "$(Build.SourceBranchName)" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          final_version_kind="release"
        else
          final_version_kind="prerelease"
        fi
      elif echo "$(Build.SourceBranch)" | grep -qE '^refs/heads/'; then
        if [ "$(Build.SourceBranchName)" = "master" ]; then
          pack="true"
        elif echo "$(Build.SourceBranchName)" | grep -qE '\-maint$'; then
          pack="true"
        elif echo "$(Build.SourceBranchName)" | grep -qE '\-wip$'; then
          pack="true"
          pack_wip="true"
        fi
      fi

      echo "OfficialBuildId=$(Build.BuildNumber)"
      echo "DotNetFinalVersionKind=$final_version_kind"

      if [ "$pack" = "true" ]; then
        ./dotnet-env.sh dotnet pack \
          -c Release \
          "/p:OfficialBuildId=$(Build.BuildNumber)" \
          "/p:DotNetFinalVersionKind=$final_version_kind" \
          "/p:ContinuousIntegrationBuild=true" \
          src/EFCore.MySql/
      fi

      if [ "$final_version_kind" != "" ]; then
        IFS=$'\n'
        for i in $(find artifacts -name "*.nupkg"); do
          filename=$(basename $i)
          if [ "$filename" = "Pomelo.EntityFrameworkCore.MySql.$(Build.SourceBranchName).nupkg" ]; then
            pack_nuget_org="true"
          fi
        done
        unset IFS
      fi

      echo "Pack.Pack=$pack"
      echo "Pack.Wip=$pack_wip"
      echo "Pack.NugetOrg=$pack_nuget_org"
      echo "##vso[task.setvariable variable=Pack.Pack]$pack"
      echo "##vso[task.setvariable variable=Pack.Wip]$pack_wip"
      echo "##vso[task.setvariable variable=Pack.NugetOrg]$pack_nuget_org"
    displayName: "Nuget Pack"
  - task: NuGetCommand@2
    displayName: "Nuget Push AZDO Feed"
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: PomeloEFCoreNuget
      packagesToPush: artifacts/**/*.nupkg
    condition: and( succeededOrFailed(), eq(variables['Pack.Pack'],'true'), or( eq(variables['Pack.Wip'],'true'), variables['BuildSucceeded'], eq(variables['Pack.BuildFailedOverride'],'true') ) )
  - task: NuGetCommand@2
    displayName: "Nuget Push nuget.org"
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: NugetOrg
      packagesToPush: artifacts/**/*.nupkg
    condition: and( succeededOrFailed(), eq(variables['Pack.NugetOrg'],'true'), or ( variables['BuildSucceeded'], eq(variables['Pack.BuildFailedOverride'],'true') ) )
