stages:
- stage: Build
  jobs:

  - job: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - bash: |
        set -e
        sudo systemctl stop mysql
        docker run --name mysql -e MYSQL_ROOT_PASSWORD=Password12! -p 3306:3306 -d mysql:8.0.17
      displayName: Start Database
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 3.0.100
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - bash: |
        dotnet --info
        set -e
        cp test/EFCore.MySql.FunctionalTests/config.json.example test/EFCore.MySql.FunctionalTests/config.json
        cp test/EFCore.MySql.IntegrationTests/appsettings.ci.json test/EFCore.MySql.IntegrationTests/appsettings.json
        cp test/EFCore.MySql.IntegrationTests/config.json.example test/EFCore.MySql.IntegrationTests/config.json
        ./build.sh
      displayName: Build Solution
    - bash: |
        ./dotnet-env.sh dotnet tool install --global dotnet-ef
        export PATH="$PATH:$HOME/.dotnet/tools"
        ./dotnet-env.sh ./test/EFCore.MySql.IntegrationTests/scripts/rebuild.sh
      displayName: Setup Database
    - bash: ./dotnet-env.sh dotnet test --logger trx test/EFCore.MySql.Tests
      displayName: Tests
      continueOnError: true
    - bash: ./dotnet-env.sh dotnet test -c Release --logger trx test/EFCore.MySql.FunctionalTests
      displayName: Functional Tests
      continueOnError: true
    - bash: ./dotnet-env.sh dotnet run --project test/EFCore.MySql.IntegrationTests -c Release testMigrate
      displayName: Integration Tests applying migrations
      continueOnError: true
    - bash: |
        ./dotnet-env.sh ./test/EFCore.MySql.IntegrationTests/scripts/scaffold.sh
      displayName: Integration Tests scaffolding
      continueOnError: true
    - bash: rm -rf ./test/EFCore.MySql.IntegrationTests/Scaffold
      displayName: Remove scaffolding files
      continueOnError: true
    - bash: ./dotnet-env.sh dotnet test -c Release --logger trx test/EFCore.MySql.IntegrationTests
      displayName: Integration Tests with EF_BATCH_SIZE=1
      continueOnError: true
    - bash: export EF_BATCH_SIZE="10" && ./dotnet-env.sh dotnet test -c Release --logger trx test/EFCore.MySql.IntegrationTests
      displayName: Integration Tests with EF_BATCH_SIZE=10
      continueOnError: true
    - bash: export EF_RETRY_ON_FAILURE="3" && ./dotnet-env.sh dotnet test -c Release --logger trx test/EFCore.MySql.IntegrationTests
      displayName: Integration Tests with EF_RETRY_ON_FAILURE=3
      continueOnError: true
    - bash: ./dotnet-env.sh ./test/EFCore.MySql.IntegrationTests/scripts/legacy.sh
      displayName: Integration Tests legacy migrations
      continueOnError: true
    - bash: export EF_SCHEMA="pomelo_test2" && ./dotnet-env.sh dotnet build ./test/EFCore.MySql.IntegrationTests -c Release
      displayName: Integration Tests Building migrations with EF_DATABASE=pomelo_test2
      continueOnError: true
    - bash: export EF_SCHEMA="pomelo_test2" && ./dotnet-env.sh ./test/EFCore.MySql.IntegrationTests/scripts/rebuild.sh
      displayName: Integration Tests Setup migrations with EF_DATABASE=pomelo_test2
      continueOnError: true
    - bash: export EF_SCHEMA="pomelo_test2" && ./dotnet-env.sh dotnet test -c Release --logger trx test/EFCore.MySql.IntegrationTests
      displayName: Integration Tests with EF_SCHEMA=pomelo_test2
      continueOnError: true
    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: test/**/*.trx
        failTaskOnFailedTests: true
    - bash: |
        set -e

        pack="false"
        final_version_kind=""
        wip="false"

        if echo "$(Build.SourceBranch)" | grep -qE '^refs/tags/'; then
          pack="true"
          if echo "$(Build.SourceBranchName)" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            final_version_kind="release"
          else
            final_version_kind="prerelease"
          fi
        elif echo "$(Build.SourceBranch)" | grep -qE '^refs/heads/'; then
          if [ "$(Build.SourceBranchName)" = "master" ]; then
            pack="true"
          elif echo "$(Build.SourceBranchName)" | grep -qE '\-wip$'; then
            pack="true"
            wip="true"
          fi
        fi

        echo "Pack.Pack=$pack"
        echo "Pack.Wip=$wip"
        echo "OfficialBuildId=$(Build.BuildNumber)"
        echo "DotNetFinalVersionKind=$final_version_kind"

        echo "##vso[task.setvariable variable=Pack.Pack]$pack"
        echo "##vso[task.setvariable variable=Pack.Wip]$wip"

        if [ "$pack" = "true" ]; then
          ./dotnet-env.sh dotnet pack \
            -c Release \
            "/p:OfficialBuildId=$(Build.BuildNumber)" \
            "/p:DotNetFinalVersionKind=$final_version_kind" \
            "/p:ContinuousIntegrationBuild=true" \
            src/EFCore.MySql/
        fi
      displayName: "Nuget Pack"
      condition: succeededOrFailed()
    - task: NuGetCommand@2
      displayName: "Nuget Push"
      inputs:
        command: push
        nuGetFeedType: external
        publishFeedCredentials: PomeloEFCoreNuget
        packagesToPush: artifacts/**/*.nupkg
      condition: and( eq(variables['Pack.Pack'],'true'), or( and( eq(variables['Pack.Wip'],'true'), succeededOrFailed() ), and( eq(variables['Pack.Wip'],'false'), succeeded() ) ) )

  - job: Windows
    pool:
      vmImage: 'windows-2019'
    steps:
    - pwsh: choco install mysql
      displayName: Start Database
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 3.0.100
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - pwsh: |
        dotnet --info
        $ErrorActionPreference = "Stop"
        cp test\EFCore.MySql.FunctionalTests\config.json.example test\EFCore.MySql.FunctionalTests\config.json
        cp test\EFCore.MySql.IntegrationTests\appsettings.ci.json test\EFCore.MySql.IntegrationTests\appsettings.json
        cp test\EFCore.MySql.IntegrationTests\config.json.example test\EFCore.MySql.IntegrationTests\config.json
        .\build.cmd
      displayName: Build
    - pwsh: |
        $ErrorActionPreference = "Stop"
        C:\tools\mysql\current\bin\mysql.exe -h localhost -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'Password12!';"
        .\dotnet-env.ps1 dotnet tool install --global dotnet-ef
        .\dotnet-env.ps1 .\test\EFCore.MySql.IntegrationTests\scripts\rebuild.ps1
      displayName: Setup Database
    - pwsh: .\dotnet-env.ps1 dotnet test --logger trx test\EFCore.MySql.Tests
      displayName: Tests
      continueOnError: true
    - pwsh: .\dotnet-env.ps1 dotnet test -c Release --logger trx test\EFCore.MySql.FunctionalTests
      displayName: Functional Tests
      continueOnError: true
    - pwsh: .\dotnet-env.ps1 dotnet run --project test\EFCore.MySql.IntegrationTests -c Release testMigrate
      displayName: Integration Tests applying migration
      continueOnError: true
    - pwsh: .\dotnet-env.ps1 dotnet test -c Release --logger trx test\EFCore.MySql.IntegrationTests
      displayName: Integration Tests with EF_BATCH_SIZE=1
      continueOnError: true
    - pwsh: $env:EF_BATCH_SIZE="10"; .\dotnet-env.ps1 dotnet test -c Release --logger trx test\EFCore.MySql.IntegrationTests
      displayName: Integration Tests with EF_BATCH_SIZE=10
      continueOnError: true
    - pwsh: $env:EF_RETRY_ON_FAILURE="3"; .\dotnet-env.ps1 dotnet test -c Release --logger trx test\EFCore.MySql.IntegrationTests
      displayName: Integration Tests with EF_RETRY_ON_FAILURE=3
      continueOnError: true
    - pwsh: $env:EF_SCHEMA="pomelo_test2"; .\dotnet-env.ps1 dotnet build .\test\EFCore.MySql.IntegrationTests -c Release
      displayName: Integration Tests Building migrations with EF_DATABASE=pomelo_test2
      continueOnError: true
    - pwsh: $env:EF_SCHEMA="pomelo_test2"; .\dotnet-env.ps1 .\test\EFCore.MySql.IntegrationTests\scripts\rebuild.ps1
      displayName: Integration Tests Setup migrations with EF_DATABASE=pomelo_test2
      continueOnError: true
    - pwsh: $env:EF_SCHEMA="pomelo_test2"; .\dotnet-env.ps1 dotnet test -c Release --logger trx test\EFCore.MySql.IntegrationTests
      displayName: Integration Tests with EF_SCHEMA=pomelo_test2
      continueOnError: true
    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: test/**/*.trx
        failTaskOnFailedTests: true