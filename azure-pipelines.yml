trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'
variables:
  isPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]
  pullRequestSourceBranch: $[variables['System.PullRequest.SourceBranch']]
  skipWindowsTests: $[and(eq(variables['isPullRequest'], 'True'), ne(contains(variables['pullRequestSourceBranch'], 'windows'), 'True'))]
  mysqlCurrentSqlMode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
  mysqlLegacySqlMode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
  # Currently no ONLY_FULL_GROUP_BY, see #1167:
  mariadbSqlMode: STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
  maxConnections: 255
  runIntegrationTests: true

  # Dotnet + Tools versioning:
  majorDotnetVersion: 8 # empty uses global.json (for rtm/servicing releases), otherwise the major version, e.g. 6
  includeDotnetPrereleases: true

  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
jobs:
  - job: BuildAndTest
    displayName: Build and Test
    strategy:
      matrix:
        MySQL 8.0 (Windows): # Apr 2026
          vmImageName: 'windows-latest'
          databaseServerType: 'mysql'
          databaseServerVersion: '8.0.31'
          sqlMode: $(mysqlCurrentSqlMode)
          skipTests: $(skipWindowsTests)
        MySQL 8.0 (Linux): # Apr 2026
          vmImageName: 'ubuntu-latest'
          databaseServerType: 'mysql'
          databaseServerVersion: '8.0.34'
          sqlMode: $(mysqlCurrentSqlMode)
          skipTests: false
        MySQL 5.7 (Linux): # Oct 2023
          vmImageName: 'ubuntu-latest'
          databaseServerType: 'mysql'
          databaseServerVersion: '5.7.43'
          sqlMode: $(mysqlLegacySqlMode)
          skipTests: false
        MariaDB 11.1 (Linux): # Aug 2024
          vmImageName: 'ubuntu-latest'
          databaseServerType: 'mariadb'
          databaseServerVersion: '11.1.2'
          sqlMode: $(mariadbSqlMode)
          skipTests: false
        MariaDB 11.0 (Linux): # Jun 2024
          vmImageName: 'ubuntu-latest'
          databaseServerType: 'mariadb'
          databaseServerVersion: '11.0.3'
          sqlMode: $(mariadbSqlMode)
          skipTests: false
        MariaDB 10.11 (Linux): # Feb 2028
          vmImageName: 'ubuntu-latest'
          databaseServerType: 'mariadb'
          databaseServerVersion: '10.11.5'
          sqlMode: $(mariadbSqlMode)
          skipTests: false
        MariaDB 10.10 (Linux): # Nov 2023
          vmImageName: 'ubuntu-latest'
          databaseServerType: 'mariadb'
          databaseServerVersion: '10.10.6'
          sqlMode: $(mariadbSqlMode)
          skipTests: false
#        MariaDB 10.9 (Linux): # EoL
#          vmImageName: 'ubuntu-latest'
#          databaseServerType: 'mariadb'
#          databaseServerVersion: '10.9.8'
#          sqlMode: $(mariadbSqlMode)
#          skipTests: false
#        MariaDB 10.8 (Linux): # EoL
#          vmImageName: 'ubuntu-latest'
#          databaseServerType: 'mariadb'
#          databaseServerVersion: '10.8.8'
#          sqlMode: $(mariadbSqlMode)
#          skipTests: false
#        MariaDB 10.7 (Linux): # EoL
#          vmImageName: 'ubuntu-latest'
#          databaseServerType: 'mariadb'
#          databaseServerVersion: '10.7.8'
#          sqlMode: $(mariadbSqlMode)
#          skipTests: false
        MariaDB 10.6 (Linux): # Jul 2026
          vmImageName: 'ubuntu-latest'
          databaseServerType: 'mariadb'
          databaseServerVersion: '10.6.15'
          sqlMode: $(mariadbSqlMode)
          skipTests: false
        MariaDB 10.5 (Linux): # Jun 2025
          vmImageName: 'ubuntu-latest'
          databaseServerType: 'mariadb'
          databaseServerVersion: '10.5.22'
          sqlMode: $(mariadbSqlMode)
          skipTests: false
        MariaDB 10.4 (Linux): # Jun 2024
          vmImageName: 'ubuntu-latest'
          databaseServerType: 'mariadb'
          databaseServerVersion: '10.4.31'
          sqlMode: $(mariadbSqlMode)
          skipTests: false
#        MariaDB 10.3 (Linux): # EoL
#          vmImageName: 'ubuntu-latest'
#          databaseServerType: 'mariadb'
#          databaseServerVersion: '10.3.39'
#          sqlMode: $(mariadbSqlMode)
#          skipTests: false
    pool:
      vmImage: $(vmImageName)
    steps:
      - pwsh: |
          $dotnetVersion = ''
          $dotnetEfToolUpdateVersion = ''
          $useGlobalJson = $false

          if ('$(majorDotnetVersion)' -ne '')
          {
            $dotnetVersion = '$(majorDotnetVersion).x'

            if ('$(includeDotnetPrereleases)' -eq 'true')
            {
              $dotnetEfToolUpdateVersion = '$(majorDotnetVersion).*-*'
            }
            else
            {
              $dotnetEfToolUpdateVersion = '$(majorDotnetVersion).*'
            }
          }
          else
          {
            $useGlobalJson = $true
          }

          echo "##vso[task.setvariable variable=dotnetVersion]$dotnetVersion"
          echo "##vso[task.setvariable variable=dotnetEfToolUpdateVersion]$dotnetEfToolUpdateVersion"
          echo "##vso[task.setvariable variable=useGlobalJson]$useGlobalJson"
        displayName: Set additional variables
      - pwsh: |
          echo "skipTests: $(skipTests)"
          echo "skipWindowsTests: $(skipWindowsTests)"
          echo "pullRequestSourceBranch: $(pullRequestSourceBranch)"
          echo "isPullRequest: $(isPullRequest)"
          echo "Build.SourceBranchName: $(Build.SourceBranchName)"
          echo "Build.SourceVersionMessage: $(Build.SourceVersionMessage)"
          echo "dotnetVersion: $(dotnetVersion)"
          echo "includeDotnetPrereleases: $(includeDotnetPrereleases)"
          echo "useGlobalJson: $(useGlobalJson)"
        displayName: Output Variables
      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK'
        inputs:
          version: $(dotnetVersion)
          includePreviewVersions: $(includeDotnetPrereleases)
          useGlobalJson: $(useGlobalJson)
      - pwsh: |
          if ('$(Agent.OS)' -eq 'Windows_NT')
          {
            $mySqlServiceName = '$(databaseServerType)_$(databaseServerVersion)'
            $lowerCaseTableNames = 2
            $mySqlBinPath = 'C:\tools\mysql\current\bin'
            $mySqlIniPath = 'C:\tools\mysql\current\my.ini'
            $mySqlDataPath = 'C:\ProgramData\MySQL\data'

            echo "Chocolatey command: choco install '$(databaseServerType)' '--version=$(databaseServerVersion)' --params `"/serviceName:$mySqlServiceName`""
            choco install '$(databaseServerType)' '--version=$(databaseServerVersion)' --params "/serviceName:$mySqlServiceName"

            Get-Service *MySQL* -ErrorAction SilentlyContinue
            Stop-Service $mySqlServiceName -Verbose

            echo "Update PATH environment variable"
            Write-Host "##vso[task.prependpath]$mySqlBinPath"
            $env:PATH = "$mySqlBinPath;$env:PATH"

            echo "Update configuration file"
            "lower_case_table_names=$lowerCaseTableNames" >> $mySqlIniPath

            Remove-Item $mySqlDataPath/* -Recurse -Force -Verbose

            echo "Reinitialize database server"
            mysqld --defaults-file="$mySqlIniPath" --initialize-insecure

            Start-Service $mySqlServiceName -Verbose

            echo "Setup credentials"
            mysql -h localhost -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'Password12!';"
            mysql -h localhost -u root -pPassword12! -e "SELECT @@version;"
          }
          else
          {
            sudo systemctl stop mysql

            $waitMinutes = 5
            $pollingIntervalSeconds = 3
            $started = $false

            # MariaDB 11+ docker images do not ship with mysqladmin, but contain an official health check script.
            if ('$(databaseServerType)' -eq 'mariadb' -and '$(databaseServerVersion)'.Split('.')[0] -ge 11)
            {
              $timeoutSeconds = 3

              docker run --name mysql -d -e MYSQL_ROOT_PASSWORD=Password12! -p 127.0.0.1:3306:3306 --health-cmd="healthcheck.sh --connect --innodb_initialized" "--health-interval=${pollingIntervalSeconds}s" "--health-timeout=${timeoutSeconds}s" "--health-retries=$($waitMinutes * 60 / ($pollingIntervalSeconds + $timeoutSeconds))" '$(databaseServerType):$(databaseServerVersion)'

              $started = Test-Connection 127.0.0.1 -TcpPort 3306
            }
            else
            {
              docker run --name mysql -e MYSQL_ROOT_PASSWORD=Password12! -p 127.0.0.1:3306:3306 -d '$(databaseServerType):$(databaseServerVersion)'
              $startTime = Get-Date

              while (!($started = docker exec mysql mysqladmin --protocol=tcp -h localhost -P 3306 -u root -pPassword12! status) -and ((Get-Date) - $startTime).TotalMinutes -lt $waitMinutes)
              {
                Start-Sleep -Seconds $pollingIntervalSeconds
              }
            }

            if (!$started)
            {
              throw "$(databaseServerType):$(databaseServerVersion) docker container failed to start in $(waitMinutes) minutes"
              exit 1
            }
          }
        displayName: Install Database Server
      - pwsh: |
          $mySqlCommand = "mysql --protocol=tcp -h localhost -P 3306 -u root -pPassword12! -e ""SET GLOBAL sql_mode = '$(sqlMode)'; SET GLOBAL max_connections = $(maxConnections);"""

          if ('$(Agent.OS)' -ne 'Windows_NT')
          {
            $mySqlCommand = 'docker exec mysql ' + $mySqlCommand
          }

          $mySqlCommand

          Invoke-Expression $mySqlCommand
          echo "Exit code: $?"
        displayName: Setup Database
        ignoreLASTEXITCODE: true
      - pwsh: |
          $mySqlCommand = 'mysql --protocol=tcp -h localhost -P 3306 -u root -pPassword12! -e "SHOW VARIABLES;"'

          if ('$(Agent.OS)' -ne 'Windows_NT')
          {
            $mySqlCommand = 'docker exec mysql ' + $mySqlCommand
          }

          $mySqlCommand

          Invoke-Expression $mySqlCommand
          echo "Exit code: $?"
        displayName: Database Information
        continueOnError: true
        failOnStderr: false
        ignoreLASTEXITCODE: true
      - pwsh: dotnet --info
        displayName: .NET Information
      - pwsh: |
          if ('$(dotnetEfToolUpdateVersion)' -ne '')
          {
            dotnet tool update dotnet-ef --version $(dotnetEfToolUpdateVersion)
          }

          dotnet tool restore
          dotnet ef --version
        displayName: Install EF Core Tools
      - pwsh: |
          cp test/EFCore.MySql.FunctionalTests/config.json.example test/EFCore.MySql.FunctionalTests/config.json
          cp test/EFCore.MySql.IntegrationTests/appsettings.ci.json test/EFCore.MySql.IntegrationTests/appsettings.json
          cp test/EFCore.MySql.IntegrationTests/config.json.example test/EFCore.MySql.IntegrationTests/config.json
        displayName: Setup Solution
      - pwsh: |
          ./test/EFCore.MySql.IntegrationTests/scripts/rebuild.ps1
        displayName: Setup Integration Tests
        condition: and(ne(variables['skipTests'], true), eq(variables['runIntegrationTests'],'true'))
      - pwsh: |
          dotnet build -c Debug
          dotnet build -c Release
        displayName: Build Solution
      - pwsh: |
          dotnet test test/EFCore.MySql.FunctionalTests -c Debug --no-build --logger trx --verbosity detailed
        displayName: Functional Tests
        condition: ne(variables['skipTests'], true)
      - pwsh: |
          dotnet test --logger trx test/EFCore.MySql.Tests
        displayName: Tests
        condition: ne(variables['skipTests'], true)
      - pwsh: |
          Get-ChildItem QueryBaseline.txt -Recurse | % { $_.FullName }
          Get-Content QueryBaseline.txt -ErrorAction Ignore
        displayName: Show Query Baseline
        condition: ne(variables['skipTests'], true)
      - pwsh: |
          dotnet run --project test/EFCore.MySql.IntegrationTests -c Release testMigrate
        displayName: Integration Tests - Applying migrations
        condition: and(ne(variables['skipTests'], true), eq(variables['runIntegrationTests'],'true'))
      - pwsh: |
          ./test/EFCore.MySql.IntegrationTests/scripts/scaffold.ps1
        displayName: Integration Tests - Scaffolding
        condition: and(ne(variables['skipTests'], true), eq(variables['runIntegrationTests'],'true'))
      - pwsh: |
          $env:EF_BATCH_SIZE = "1"
          dotnet test -c Release --no-build --logger trx test/EFCore.MySql.IntegrationTests
        displayName: Integration Tests - With EF_BATCH_SIZE = 1
        condition: and(ne(variables['skipTests'], true), eq(variables['runIntegrationTests'],'true'))
      - pwsh: |
          $env:EF_BATCH_SIZE = "10"
          dotnet test -c Release --no-build --logger trx test/EFCore.MySql.IntegrationTests
        displayName: Integration Tests - With EF_BATCH_SIZE = 10
        condition: and(ne(variables['skipTests'], true), eq(variables['runIntegrationTests'],'true'))
      - pwsh: |
          $env:EF_RETRY_ON_FAILURE = "3"
          dotnet test -c Release --no-build --logger trx test/EFCore.MySql.IntegrationTests
        displayName: Integration Tests - With EF_RETRY_ON_FAILURE = 3
        condition: and(ne(variables['skipTests'], true), eq(variables['runIntegrationTests'],'true'))
      - pwsh: ./test/EFCore.MySql.IntegrationTests/scripts/legacy.ps1
        displayName: Integration Tests - Legacy migrations
        condition: and(ne(variables['skipTests'], true), eq(variables['runIntegrationTests'],'true'))
      - pwsh: |
          $env:EF_DATABASE = "pomelo_test2"
          dotnet build ./test/EFCore.MySql.IntegrationTests -c Release
        displayName: Integration Tests - Building migrations with EF_DATABASE = pomelo_test2
        condition: and(ne(variables['skipTests'], true), eq(variables['runIntegrationTests'],'true'))
      - pwsh: |
          $env:EF_DATABASE = "pomelo_test2"
          ./test/EFCore.MySql.IntegrationTests/scripts/rebuild.ps1
        displayName: Integration Tests - Setup migrations with EF_DATABASE = pomelo_test2
        condition: and(ne(variables['skipTests'], true), eq(variables['runIntegrationTests'],'true'))
      - pwsh: |
          $env:EF_DATABASE = "pomelo_test2"
          dotnet test -c Release --no-build --logger trx test/EFCore.MySql.IntegrationTests
        displayName: Integration Tests - With EF_DATABASE = pomelo_test2
        condition: and(ne(variables['skipTests'], true), eq(variables['runIntegrationTests'],'true'))
      - task: PublishTestResults@2
        displayName: Publish Test Results
        condition: and(ne(variables['skipTests'], true), succeededOrFailed())
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: test/**/*.trx
          testRunTitle: $(Agent.OS) $(databaseServerType):$(databaseServerVersion)
          mergeTestResults: true
          failTaskOnFailedTests: true
  - job: NuGet
    dependsOn:
      - BuildAndTest
    condition: and(succeededOrFailed(), ne(variables['isPullRequest'], true))
    variables:
      runDespiteIssues: $[endsWith(variables['Build.SourceBranch'], '-wip')]
      buildAndTestSucceeded: $[or(eq(dependencies.BuildAndTest.result, 'Succeeded'), and(eq(dependencies.BuildAndTest.result, 'SucceededWithIssues'), variables['runDespiteIssues']))]
    pool:
      vmImage: 'windows-latest' # must be Windows for PublishSymbols task
    steps:
      - pwsh: |
          $dotnetVersion = ''
          $dotnetEfToolUpdateVersion = ''
          $useGlobalJson = $false

          if ('$(majorDotnetVersion)' -ne '')
          {
            $dotnetVersion = '$(majorDotnetVersion).x'

            if ('$(includeDotnetPrereleases)' -eq 'true')
            {
              $dotnetEfToolUpdateVersion = '$(majorDotnetVersion).*-*'
            }
            else
            {
              $dotnetEfToolUpdateVersion = '$(majorDotnetVersion).*'
            }
          }
          else
          {
            $useGlobalJson = $true
          }

          echo "##vso[task.setvariable variable=dotnetVersion]$dotnetVersion"
          echo "##vso[task.setvariable variable=dotnetEfToolUpdateVersion]$dotnetEfToolUpdateVersion"
          echo "##vso[task.setvariable variable=useGlobalJson]$useGlobalJson"
        displayName: Set additional variables
      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK'
        inputs:
          version: $(dotnetVersion)
          includePreviewVersions: $(includeDotnetPrereleases)
          useGlobalJson: $(useGlobalJson)
      - pwsh: dotnet --info
        displayName: .NET Information
      - pwsh: |
          $officialBuild = '$(Build.SourceBranch)' -match '(?<=^refs/tags/)\d+\.\d+\.\d+.*$'
          $officialVersion = $Matches.0
          $wipBuild = '$(Build.SourceBranch)' -match '^refs/heads/.*-wip$'
          $ciBuildOnly = $wipBuild -or ('$(Build.SourceBranch)' -match '^refs/heads/(?:master|release/.*)$')
          $continuousIntegrationTimestamp = Get-Date -Format yyyyMMddHHmmss
          $buildSha = '$(Build.SourceVersion)'.SubString(0, 7);
          $pack = '$(buildAndTestSucceeded)' -eq "true" -and ($officialBuild -or $ciBuildOnly -or $wipBuild)

          echo "officialBuild: $officialBuild"
          echo "officialVersion: $officialVersion"
          echo "wipBuild: $wipBuild"
          echo "ciBuildOnly: $ciBuildOnly"
          echo "continuousIntegrationTimestamp: $continuousIntegrationTimestamp"
          echo "buildSha: $buildSha"
          echo "pack: $pack"

          if ($pack)
          {
            $arguments = 'pack', '-c', 'Release', '-o', '$(Build.ArtifactStagingDirectory)', '-p:ContinuousIntegrationBuild=true'

            if ($officialBuild)
            {
              $arguments += "-p:OfficialVersion=$officialVersion"
            }

            if ($ciBuildOnly)
            {
              $arguments += "-p:ContinuousIntegrationTimestamp=$continuousIntegrationTimestamp"
              $arguments += "-p:BuildSha=$buildSha"
            }

            $projectFiles = Get-ChildItem src/*/*.csproj -Recurse | % { $_.FullName }

            foreach ($projectFile in $projectFiles)
            {
              echo "Pack command: dotnet " + (($arguments + $projectFile) -join ' ')
              & dotnet ($arguments + $projectFile)
            }

            $pushToAzureArtifacts = $pack
            $publishSymbolsForAzureArtifacts = $pushToAzureArtifacts
            $pushToNugetOrg = $officialBuild

            echo "pushToAzureArtifacts: $pushToAzureArtifacts"
            echo "publishSymbolsForAzureArtifacts: $publishSymbolsForAzureArtifacts"
            echo "pushToNugetOrg: $pushToNugetOrg"

            echo "##vso[task.setvariable variable=Pack.PushToAzureArtifacts]$pushToAzureArtifacts"
            echo "##vso[task.setvariable variable=Pack.PublishSymbolsForAzureArtifacts]$publishSymbolsForAzureArtifacts"
            echo "##vso[task.setvariable variable=Pack.PushToNugetOrg]$pushToNugetOrg"
          }
        displayName: "NuGet Pack"
      - task: NuGetCommand@2
        displayName: "NuGet Push - AZDO Feed"
        inputs:
          command: push
          publishVstsFeed: 'Pomelo.EntityFrameworkCore.MySql/pomelo-efcore-public'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
        condition: and(succeededOrFailed(), eq(variables['Pack.PushToAzureArtifacts'],'true'))
      - task: PublishSymbols@2 # AZDO still has no snupkg support, so we need to publish the PDB files to a symbol server
        displayName: "Publish Symbols to Azure Artifacts symbol server"
        inputs:
          symbolServerType: 'TeamServices'
          treatNotIndexedAsWarning: false
          indexSources: false
        condition: and(succeededOrFailed(), eq(variables['Pack.PublishSymbolsForAzureArtifacts'],'true'))
      - task: NuGetCommand@2
        displayName: "NuGet Push - nuget.org"
        inputs:
          command: push
          nuGetFeedType: external
          publishFeedCredentials: NugetOrg-PomeloFoundation-AllPackages-PushNew
          packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
        condition: and(succeededOrFailed(), eq(variables['Pack.PushToNugetOrg'],'true'))